//
//  ChatViewModel.swift
//  DevsApp
//
//  Created by Jean Ramalho on 29/10/25.
//
import Foundation

final class ChatViewModel {
    
    // MARK: - Dados pÃºblicos (apenas leitura)
    private(set) var messages: [ChatMessage] = []
    
    // UsuÃ¡rio atual (remova/adeque conforme sua camada de autenticaÃ§Ã£o)
    let currentUser: ChatSender = ChatSender(senderId: "user_1", displayName: "Jean")
    let otherUser: ChatSender   = ChatSender(senderId: "user_2", displayName: "Carlos")
    
    // Callback para avisar a view quando hÃ¡ mudanÃ§as (simples binding)
    var onMessagesUpdated: (() -> Void)?
    
    init() {
        loadMockMessages()
    }
    
    // Carrega mensagens mockadas (vÃ¡rios tamanhos para testar balÃµes adaptativos)
    private func loadMockMessages() {
        let mocks: [ChatMessage] = [
            ChatMessage(text: "E aÃ­! Testando o chat com MessageKit ğŸ™‚", sender: otherUser, date: Date().addingTimeInterval(-3600*24)),
            ChatMessage(text: "Show! Quero ver como ficam os balÃµes com textos longos. Vou mandar uma mensagem bem longa para testar a quebra de linha, tamanho dinÃ¢mico, e tambÃ©m para verificar espaÃ§amentos e alinhamento. âœ…", sender: currentUser, date: Date().addingTimeInterval(-3600*23)),
            ChatMessage(text: "Perfeito. Parece que funciona muito bem. Outra mensagem curta.", sender: otherUser, date: Date().addingTimeInterval(-3600*22)),
            ChatMessage(text: "Aqui mais uma para garantir que o scroll funciona quando vÃ¡rias mensagens existirem.", sender: currentUser, date: Date().addingTimeInterval(-3600*21)),
            ChatMessage(text: "Ãšltima do dia â€” curto e direto.", sender: otherUser, date: Date().addingTimeInterval(-3600*20))
        ]
        
        self.messages = mocks
        onMessagesUpdated?()
    }
    
    // NÃºmero de mensagens (Ãºtil para collection view)
    func numberOfMessages() -> Int {
        return messages.count
    }
    
    // Mensagem por indexPath/section (MessageKit usa sections por mensagem)
    func message(at index: Int) -> ChatMessage {
        return messages[index]
    }
    
    // Envia (adiciona) uma nova mensagem de texto â€” atualiza a lista e chama callback
    func sendMessage(text: String) {
        let new = ChatMessage(text: text, sender: currentUser, date: Date())
        messages.append(new)
        onMessagesUpdated?()
    }
    
    // Simula recebimento de mensagem (Ãºtil para testes)
    func receiveMockReply() {
        let reply = ChatMessage(text: "Resposta automÃ¡tica de teste.", sender: otherUser, date: Date())
        messages.append(reply)
        onMessagesUpdated?()
    }
}
